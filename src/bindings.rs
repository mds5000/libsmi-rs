/* automatically generated by rust-bindgen 0.57.0 */

pub type size_t = ::std::os::raw::c_ulong;
pub type __time_t = ::std::os::raw::c_long;
pub type time_t = __time_t;
pub type va_list = __builtin_va_list;
pub type SmiIdentifier = *mut ::std::os::raw::c_char;
pub type SmiUnsigned32 = ::std::os::raw::c_ulong;
pub type SmiInteger32 = ::std::os::raw::c_long;
pub type SmiUnsigned64 = ::std::os::raw::c_ulonglong;
pub type SmiInteger64 = ::std::os::raw::c_longlong;
pub type SmiSubid = ::std::os::raw::c_uint;
pub type SmiFloat32 = f32;
pub type SmiFloat64 = f64;
pub type SmiFloat128 = u128;
pub const SmiLanguage_SMI_LANGUAGE_UNKNOWN: SmiLanguage = 0;
pub const SmiLanguage_SMI_LANGUAGE_SMIV1: SmiLanguage = 1;
pub const SmiLanguage_SMI_LANGUAGE_SMIV2: SmiLanguage = 2;
pub const SmiLanguage_SMI_LANGUAGE_SMING: SmiLanguage = 3;
pub const SmiLanguage_SMI_LANGUAGE_SPPI: SmiLanguage = 4;
pub type SmiLanguage = ::std::os::raw::c_uint;
pub const SmiBasetype_SMI_BASETYPE_UNKNOWN: SmiBasetype = 0;
pub const SmiBasetype_SMI_BASETYPE_INTEGER32: SmiBasetype = 1;
pub const SmiBasetype_SMI_BASETYPE_OCTETSTRING: SmiBasetype = 2;
pub const SmiBasetype_SMI_BASETYPE_OBJECTIDENTIFIER: SmiBasetype = 3;
pub const SmiBasetype_SMI_BASETYPE_UNSIGNED32: SmiBasetype = 4;
pub const SmiBasetype_SMI_BASETYPE_INTEGER64: SmiBasetype = 5;
pub const SmiBasetype_SMI_BASETYPE_UNSIGNED64: SmiBasetype = 6;
pub const SmiBasetype_SMI_BASETYPE_FLOAT32: SmiBasetype = 7;
pub const SmiBasetype_SMI_BASETYPE_FLOAT64: SmiBasetype = 8;
pub const SmiBasetype_SMI_BASETYPE_FLOAT128: SmiBasetype = 9;
pub const SmiBasetype_SMI_BASETYPE_ENUM: SmiBasetype = 10;
pub const SmiBasetype_SMI_BASETYPE_BITS: SmiBasetype = 11;
pub const SmiBasetype_SMI_BASETYPE_POINTER: SmiBasetype = 12;
pub type SmiBasetype = ::std::os::raw::c_uint;
pub const SmiStatus_SMI_STATUS_UNKNOWN: SmiStatus = 0;
pub const SmiStatus_SMI_STATUS_CURRENT: SmiStatus = 1;
pub const SmiStatus_SMI_STATUS_DEPRECATED: SmiStatus = 2;
pub const SmiStatus_SMI_STATUS_MANDATORY: SmiStatus = 3;
pub const SmiStatus_SMI_STATUS_OPTIONAL: SmiStatus = 4;
pub const SmiStatus_SMI_STATUS_OBSOLETE: SmiStatus = 5;
pub type SmiStatus = ::std::os::raw::c_uint;
pub const SmiAccess_SMI_ACCESS_UNKNOWN: SmiAccess = 0;
pub const SmiAccess_SMI_ACCESS_NOT_IMPLEMENTED: SmiAccess = 1;
pub const SmiAccess_SMI_ACCESS_NOT_ACCESSIBLE: SmiAccess = 2;
pub const SmiAccess_SMI_ACCESS_NOTIFY: SmiAccess = 3;
pub const SmiAccess_SMI_ACCESS_READ_ONLY: SmiAccess = 4;
pub const SmiAccess_SMI_ACCESS_READ_WRITE: SmiAccess = 5;
pub const SmiAccess_SMI_ACCESS_INSTALL: SmiAccess = 6;
pub const SmiAccess_SMI_ACCESS_INSTALL_NOTIFY: SmiAccess = 7;
pub const SmiAccess_SMI_ACCESS_REPORT_ONLY: SmiAccess = 8;
pub const SmiAccess_SMI_ACCESS_EVENT_ONLY: SmiAccess = 9;
pub type SmiAccess = ::std::os::raw::c_uint;
pub type SmiNodekind = ::std::os::raw::c_uint;
pub const SmiDecl_SMI_DECL_UNKNOWN: SmiDecl = 0;
pub const SmiDecl_SMI_DECL_IMPLICIT_TYPE: SmiDecl = 1;
pub const SmiDecl_SMI_DECL_TYPEASSIGNMENT: SmiDecl = 2;
pub const SmiDecl_SMI_DECL_IMPL_SEQUENCEOF: SmiDecl = 4;
pub const SmiDecl_SMI_DECL_VALUEASSIGNMENT: SmiDecl = 5;
pub const SmiDecl_SMI_DECL_OBJECTTYPE: SmiDecl = 6;
pub const SmiDecl_SMI_DECL_OBJECTIDENTITY: SmiDecl = 7;
pub const SmiDecl_SMI_DECL_MODULEIDENTITY: SmiDecl = 8;
pub const SmiDecl_SMI_DECL_NOTIFICATIONTYPE: SmiDecl = 9;
pub const SmiDecl_SMI_DECL_TRAPTYPE: SmiDecl = 10;
pub const SmiDecl_SMI_DECL_OBJECTGROUP: SmiDecl = 11;
pub const SmiDecl_SMI_DECL_NOTIFICATIONGROUP: SmiDecl = 12;
pub const SmiDecl_SMI_DECL_MODULECOMPLIANCE: SmiDecl = 13;
pub const SmiDecl_SMI_DECL_AGENTCAPABILITIES: SmiDecl = 14;
pub const SmiDecl_SMI_DECL_TEXTUALCONVENTION: SmiDecl = 15;
pub const SmiDecl_SMI_DECL_MACRO: SmiDecl = 16;
pub const SmiDecl_SMI_DECL_COMPL_GROUP: SmiDecl = 17;
pub const SmiDecl_SMI_DECL_COMPL_OBJECT: SmiDecl = 18;
pub const SmiDecl_SMI_DECL_IMPL_OBJECT: SmiDecl = 19;
pub const SmiDecl_SMI_DECL_MODULE: SmiDecl = 33;
pub const SmiDecl_SMI_DECL_EXTENSION: SmiDecl = 34;
pub const SmiDecl_SMI_DECL_TYPEDEF: SmiDecl = 35;
pub const SmiDecl_SMI_DECL_NODE: SmiDecl = 36;
pub const SmiDecl_SMI_DECL_SCALAR: SmiDecl = 37;
pub const SmiDecl_SMI_DECL_TABLE: SmiDecl = 38;
pub const SmiDecl_SMI_DECL_ROW: SmiDecl = 39;
pub const SmiDecl_SMI_DECL_COLUMN: SmiDecl = 40;
pub const SmiDecl_SMI_DECL_NOTIFICATION: SmiDecl = 41;
pub const SmiDecl_SMI_DECL_GROUP: SmiDecl = 42;
pub const SmiDecl_SMI_DECL_COMPLIANCE: SmiDecl = 43;
pub const SmiDecl_SMI_DECL_IDENTITY: SmiDecl = 44;
pub const SmiDecl_SMI_DECL_CLASS: SmiDecl = 45;
pub const SmiDecl_SMI_DECL_ATTRIBUTE: SmiDecl = 46;
pub const SmiDecl_SMI_DECL_EVENT: SmiDecl = 47;
pub type SmiDecl = ::std::os::raw::c_uint;
pub const SmiIndexkind_SMI_INDEX_UNKNOWN: SmiIndexkind = 0;
pub const SmiIndexkind_SMI_INDEX_INDEX: SmiIndexkind = 1;
pub const SmiIndexkind_SMI_INDEX_AUGMENT: SmiIndexkind = 2;
pub const SmiIndexkind_SMI_INDEX_REORDER: SmiIndexkind = 3;
pub const SmiIndexkind_SMI_INDEX_SPARSE: SmiIndexkind = 4;
pub const SmiIndexkind_SMI_INDEX_EXPAND: SmiIndexkind = 5;
pub type SmiIndexkind = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct SmiValue {
    pub basetype: SmiBasetype,
    pub len: ::std::os::raw::c_uint,
    pub __bindgen_padding_0: u64,
    pub value: SmiValue__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union SmiValue__bindgen_ty_1 {
    pub unsigned64: SmiUnsigned64,
    pub integer64: SmiInteger64,
    pub unsigned32: SmiUnsigned32,
    pub integer32: SmiInteger32,
    pub float32: SmiFloat32,
    pub float64: SmiFloat64,
    pub float128: SmiFloat128,
    pub oid: *mut SmiSubid,
    pub ptr: *mut ::std::os::raw::c_char,
    _bindgen_union_align: u128,
}
#[test]
fn bindgen_test_layout_SmiValue__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<SmiValue__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(SmiValue__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiValue__bindgen_ty_1>(),
        16usize,
        concat!("Alignment of ", stringify!(SmiValue__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SmiValue__bindgen_ty_1>())).unsigned64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue__bindgen_ty_1),
            "::",
            stringify!(unsigned64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SmiValue__bindgen_ty_1>())).integer64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue__bindgen_ty_1),
            "::",
            stringify!(integer64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SmiValue__bindgen_ty_1>())).unsigned32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue__bindgen_ty_1),
            "::",
            stringify!(unsigned32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SmiValue__bindgen_ty_1>())).integer32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue__bindgen_ty_1),
            "::",
            stringify!(integer32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiValue__bindgen_ty_1>())).float32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue__bindgen_ty_1),
            "::",
            stringify!(float32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiValue__bindgen_ty_1>())).float64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue__bindgen_ty_1),
            "::",
            stringify!(float64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiValue__bindgen_ty_1>())).float128 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue__bindgen_ty_1),
            "::",
            stringify!(float128)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiValue__bindgen_ty_1>())).oid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue__bindgen_ty_1),
            "::",
            stringify!(oid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiValue__bindgen_ty_1>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
}
#[test]
fn bindgen_test_layout_SmiValue() {
    assert_eq!(
        ::std::mem::size_of::<SmiValue>(),
        32usize,
        concat!("Size of: ", stringify!(SmiValue))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiValue>(),
        16usize,
        concat!("Alignment of ", stringify!(SmiValue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiValue>())).basetype as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue),
            "::",
            stringify!(basetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiValue>())).len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiValue>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct SmiNamedNumber {
    pub name: SmiIdentifier,
    pub __bindgen_padding_0: u64,
    pub value: SmiValue,
}
#[test]
fn bindgen_test_layout_SmiNamedNumber() {
    assert_eq!(
        ::std::mem::size_of::<SmiNamedNumber>(),
        48usize,
        concat!("Size of: ", stringify!(SmiNamedNumber))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiNamedNumber>(),
        16usize,
        concat!("Alignment of ", stringify!(SmiNamedNumber))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNamedNumber>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNamedNumber),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNamedNumber>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNamedNumber),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct SmiRange {
    pub minValue: SmiValue,
    pub maxValue: SmiValue,
}
#[test]
fn bindgen_test_layout_SmiRange() {
    assert_eq!(
        ::std::mem::size_of::<SmiRange>(),
        64usize,
        concat!("Size of: ", stringify!(SmiRange))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiRange>(),
        16usize,
        concat!("Alignment of ", stringify!(SmiRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiRange>())).minValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiRange),
            "::",
            stringify!(minValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiRange>())).maxValue as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiRange),
            "::",
            stringify!(maxValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiModule {
    pub name: SmiIdentifier,
    pub path: *mut ::std::os::raw::c_char,
    pub organization: *mut ::std::os::raw::c_char,
    pub contactinfo: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub reference: *mut ::std::os::raw::c_char,
    pub language: SmiLanguage,
    pub conformance: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SmiModule() {
    assert_eq!(
        ::std::mem::size_of::<SmiModule>(),
        56usize,
        concat!("Size of: ", stringify!(SmiModule))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiModule>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiModule))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiModule>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiModule),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiModule>())).path as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiModule),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiModule>())).organization as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiModule),
            "::",
            stringify!(organization)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiModule>())).contactinfo as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiModule),
            "::",
            stringify!(contactinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiModule>())).description as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiModule),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiModule>())).reference as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiModule),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiModule>())).language as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiModule),
            "::",
            stringify!(language)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiModule>())).conformance as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiModule),
            "::",
            stringify!(conformance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiRevision {
    pub date: time_t,
    pub description: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SmiRevision() {
    assert_eq!(
        ::std::mem::size_of::<SmiRevision>(),
        16usize,
        concat!("Size of: ", stringify!(SmiRevision))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiRevision>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiRevision))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiRevision>())).date as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiRevision),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiRevision>())).description as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiRevision),
            "::",
            stringify!(description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiImport {
    pub module: SmiIdentifier,
    pub name: SmiIdentifier,
}
#[test]
fn bindgen_test_layout_SmiImport() {
    assert_eq!(
        ::std::mem::size_of::<SmiImport>(),
        16usize,
        concat!("Size of: ", stringify!(SmiImport))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiImport>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiImport))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiImport>())).module as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiImport),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiImport>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiImport),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiMacro {
    pub name: SmiIdentifier,
    pub decl: SmiDecl,
    pub status: SmiStatus,
    pub description: *mut ::std::os::raw::c_char,
    pub reference: *mut ::std::os::raw::c_char,
    pub abnf: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SmiMacro() {
    assert_eq!(
        ::std::mem::size_of::<SmiMacro>(),
        40usize,
        concat!("Size of: ", stringify!(SmiMacro))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiMacro>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiMacro))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiMacro>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiMacro),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiMacro>())).decl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiMacro),
            "::",
            stringify!(decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiMacro>())).status as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiMacro),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiMacro>())).description as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiMacro),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiMacro>())).reference as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiMacro),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiMacro>())).abnf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiMacro),
            "::",
            stringify!(abnf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiIdentity {
    pub name: SmiIdentifier,
    pub decl: SmiDecl,
    pub status: SmiStatus,
    pub description: *mut ::std::os::raw::c_char,
    pub reference: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SmiIdentity() {
    assert_eq!(
        ::std::mem::size_of::<SmiIdentity>(),
        32usize,
        concat!("Size of: ", stringify!(SmiIdentity))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiIdentity>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiIdentity))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiIdentity>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiIdentity),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiIdentity>())).decl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiIdentity),
            "::",
            stringify!(decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiIdentity>())).status as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiIdentity),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiIdentity>())).description as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiIdentity),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiIdentity>())).reference as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiIdentity),
            "::",
            stringify!(reference)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct SmiType {
    pub name: SmiIdentifier,
    pub basetype: SmiBasetype,
    pub decl: SmiDecl,
    pub format: *mut ::std::os::raw::c_char,
    pub __bindgen_padding_0: u64,
    pub value: SmiValue,
    pub units: *mut ::std::os::raw::c_char,
    pub status: SmiStatus,
    pub description: *mut ::std::os::raw::c_char,
    pub reference: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SmiType() {
    assert_eq!(
        ::std::mem::size_of::<SmiType>(),
        96usize,
        concat!("Size of: ", stringify!(SmiType))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiType>(),
        16usize,
        concat!("Alignment of ", stringify!(SmiType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiType>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiType),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiType>())).basetype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiType),
            "::",
            stringify!(basetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiType>())).decl as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiType),
            "::",
            stringify!(decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiType>())).format as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiType),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiType>())).value as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiType),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiType>())).units as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiType),
            "::",
            stringify!(units)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiType>())).status as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiType),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiType>())).description as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiType),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiType>())).reference as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiType),
            "::",
            stringify!(reference)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct SmiNode {
    pub name: SmiIdentifier,
    pub oidlen: ::std::os::raw::c_uint,
    pub oid: *mut SmiSubid,
    pub decl: SmiDecl,
    pub access: SmiAccess,
    pub status: SmiStatus,
    pub format: *mut ::std::os::raw::c_char,
    pub value: SmiValue,
    pub units: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub reference: *mut ::std::os::raw::c_char,
    pub indexkind: SmiIndexkind,
    pub implied: ::std::os::raw::c_int,
    pub create: ::std::os::raw::c_int,
    pub nodekind: SmiNodekind,
}
#[test]
fn bindgen_test_layout_SmiNode() {
    assert_eq!(
        ::std::mem::size_of::<SmiNode>(),
        128usize,
        concat!("Size of: ", stringify!(SmiNode))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiNode>(),
        16usize,
        concat!("Alignment of ", stringify!(SmiNode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).oidlen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(oidlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).oid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(oid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).decl as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).access as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).status as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).format as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).value as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).units as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(units)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).description as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).reference as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).indexkind as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(indexkind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).implied as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(implied)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).create as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).nodekind as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(nodekind)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiElement {}
#[test]
fn bindgen_test_layout_SmiElement() {
    assert_eq!(
        ::std::mem::size_of::<SmiElement>(),
        0usize,
        concat!("Size of: ", stringify!(SmiElement))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiElement>(),
        1usize,
        concat!("Alignment of ", stringify!(SmiElement))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiOption {
    pub description: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SmiOption() {
    assert_eq!(
        ::std::mem::size_of::<SmiOption>(),
        8usize,
        concat!("Size of: ", stringify!(SmiOption))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiOption>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiOption))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiOption>())).description as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiOption),
            "::",
            stringify!(description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiRefinement {
    pub access: SmiAccess,
    pub description: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SmiRefinement() {
    assert_eq!(
        ::std::mem::size_of::<SmiRefinement>(),
        16usize,
        concat!("Size of: ", stringify!(SmiRefinement))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiRefinement>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiRefinement))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiRefinement>())).access as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiRefinement),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiRefinement>())).description as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiRefinement),
            "::",
            stringify!(description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiClass {
    pub name: SmiIdentifier,
    pub decl: SmiDecl,
    pub status: SmiStatus,
    pub description: *mut ::std::os::raw::c_char,
    pub reference: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SmiClass() {
    assert_eq!(
        ::std::mem::size_of::<SmiClass>(),
        32usize,
        concat!("Size of: ", stringify!(SmiClass))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiClass>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiClass))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiClass>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiClass),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiClass>())).decl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiClass),
            "::",
            stringify!(decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiClass>())).status as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiClass),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiClass>())).description as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiClass),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiClass>())).reference as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiClass),
            "::",
            stringify!(reference)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct SmiAttribute {
    pub name: SmiIdentifier,
    pub basetype: SmiBasetype,
    pub decl: SmiDecl,
    pub format: *mut ::std::os::raw::c_char,
    pub __bindgen_padding_0: u64,
    pub value: SmiValue,
    pub units: *mut ::std::os::raw::c_char,
    pub status: SmiStatus,
    pub description: *mut ::std::os::raw::c_char,
    pub reference: *mut ::std::os::raw::c_char,
    pub access: SmiAccess,
}
#[test]
fn bindgen_test_layout_SmiAttribute() {
    assert_eq!(
        ::std::mem::size_of::<SmiAttribute>(),
        112usize,
        concat!("Size of: ", stringify!(SmiAttribute))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiAttribute>(),
        16usize,
        concat!("Alignment of ", stringify!(SmiAttribute))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).basetype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(basetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).decl as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).format as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).value as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).units as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(units)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).status as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).description as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).reference as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).access as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(access)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiEvent {
    pub name: SmiIdentifier,
    pub decl: SmiDecl,
    pub status: SmiStatus,
    pub description: *mut ::std::os::raw::c_char,
    pub reference: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SmiEvent() {
    assert_eq!(
        ::std::mem::size_of::<SmiEvent>(),
        32usize,
        concat!("Size of: ", stringify!(SmiEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiEvent>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiEvent),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiEvent>())).decl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiEvent),
            "::",
            stringify!(decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiEvent>())).status as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiEvent),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiEvent>())).description as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiEvent),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiEvent>())).reference as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiEvent),
            "::",
            stringify!(reference)
        )
    );
}
extern "C" {
    pub fn smiInit(tag: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiExit();
}
extern "C" {
    pub fn smiSetErrorLevel(level: ::std::os::raw::c_int);
}
extern "C" {
    pub fn smiGetFlags() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiSetFlags(userflags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn smiGetPath() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn smiSetPath(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiSetSeverity(pattern: *mut ::std::os::raw::c_char, severity: ::std::os::raw::c_int);
}
extern "C" {
    pub fn smiReadConfig(
        filename: *const ::std::os::raw::c_char,
        tag: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiLoadModule(module: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn smiIsLoaded(module: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type SmiErrorHandler = ::std::option::Option<
    unsafe extern "C" fn(
        path: *mut ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        severity: ::std::os::raw::c_int,
        msg: *mut ::std::os::raw::c_char,
        tag: *mut ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn smiSetErrorHandler(smiErrorHandler: SmiErrorHandler);
}
extern "C" {
    pub fn smiGetModule(module: *const ::std::os::raw::c_char) -> *mut SmiModule;
}
extern "C" {
    pub fn smiGetFirstModule() -> *mut SmiModule;
}
extern "C" {
    pub fn smiGetNextModule(smiModulePtr: *mut SmiModule) -> *mut SmiModule;
}
extern "C" {
    pub fn smiGetModuleIdentityNode(smiModulePtr: *mut SmiModule) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetFirstImport(smiModulePtr: *mut SmiModule) -> *mut SmiImport;
}
extern "C" {
    pub fn smiGetNextImport(smiImportPtr: *mut SmiImport) -> *mut SmiImport;
}
extern "C" {
    pub fn smiIsImported(
        smiModulePtr: *mut SmiModule,
        importedModulePtr: *mut SmiModule,
        importedName: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetFirstRevision(smiModulePtr: *mut SmiModule) -> *mut SmiRevision;
}
extern "C" {
    pub fn smiGetNextRevision(smiRevisionPtr: *mut SmiRevision) -> *mut SmiRevision;
}
extern "C" {
    pub fn smiGetRevisionLine(smiRevisionPtr: *mut SmiRevision) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetFirstIdentity(smiModulePtr: *mut SmiModule) -> *mut SmiIdentity;
}
extern "C" {
    pub fn smiGetNextIdentity(smiIdentityPtr: *mut SmiIdentity) -> *mut SmiIdentity;
}
extern "C" {
    pub fn smiGetParentIdentity(smiIdentityPtr: *mut SmiIdentity) -> *mut SmiIdentity;
}
extern "C" {
    pub fn smiGetIdentityLine(smiIdentityPtr: *mut SmiIdentity) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetIdentityModule(smiIdentityPtr: *mut SmiIdentity) -> *mut SmiModule;
}
extern "C" {
    pub fn smiGetIdentity(
        smiModulePtr: *mut SmiModule,
        identity: *mut ::std::os::raw::c_char,
    ) -> *mut SmiIdentity;
}
extern "C" {
    pub fn smiGetType(
        smiModulePtr: *mut SmiModule,
        type_: *mut ::std::os::raw::c_char,
    ) -> *mut SmiType;
}
extern "C" {
    pub fn smiGetFirstType(smiModulePtr: *mut SmiModule) -> *mut SmiType;
}
extern "C" {
    pub fn smiGetNextType(smiTypePtr: *mut SmiType) -> *mut SmiType;
}
extern "C" {
    pub fn smiGetParentType(smiTypePtr: *mut SmiType) -> *mut SmiType;
}
extern "C" {
    pub fn smiGetTypeModule(smiTypePtr: *mut SmiType) -> *mut SmiModule;
}
extern "C" {
    pub fn smiGetTypeLine(smiTypePtr: *mut SmiType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetFirstRange(smiTypePtr: *mut SmiType) -> *mut SmiRange;
}
extern "C" {
    pub fn smiGetNextRange(smiRangePtr: *mut SmiRange) -> *mut SmiRange;
}
extern "C" {
    pub fn smiGetMinMaxRange(
        smiType: *mut SmiType,
        min: *mut SmiValue,
        max: *mut SmiValue,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetFirstNamedNumber(smiTypePtr: *mut SmiType) -> *mut SmiNamedNumber;
}
extern "C" {
    pub fn smiGetNextNamedNumber(smiNamedNumberPtr: *mut SmiNamedNumber) -> *mut SmiNamedNumber;
}
extern "C" {
    pub fn smiGetFirstClass(smiModulePtr: *mut SmiModule) -> *mut SmiClass;
}
extern "C" {
    pub fn smiGetNextClass(smiClassPtr: *mut SmiClass) -> *mut SmiClass;
}
extern "C" {
    pub fn smiGetParentClass(smiClassPtr: *mut SmiClass) -> *mut SmiClass;
}
extern "C" {
    pub fn smiGetClassModule(smiClassPtr: *mut SmiClass) -> *mut SmiModule;
}
extern "C" {
    pub fn smiGetClass(
        smiModulePtr: *mut SmiModule,
        class: *mut ::std::os::raw::c_char,
    ) -> *mut SmiClass;
}
extern "C" {
    pub fn smiGetClassLine(smiClassPtr: *mut SmiClass) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetAttribute(
        smiClassPtr: *mut SmiClass,
        attribute: *mut ::std::os::raw::c_char,
    ) -> *mut SmiAttribute;
}
extern "C" {
    pub fn smiGetFirstAttribute(smiClassPtr: *mut SmiClass) -> *mut SmiAttribute;
}
extern "C" {
    pub fn smiGetNextAttribute(smiAtrributePtr: *mut SmiAttribute) -> *mut SmiAttribute;
}
extern "C" {
    pub fn smiGetAttributeParentType(smiAtrributePtr: *mut SmiAttribute) -> *mut SmiType;
}
extern "C" {
    pub fn smiGetAttributeParentClass(smiAtrributePtr: *mut SmiAttribute) -> *mut SmiClass;
}
extern "C" {
    pub fn smiGetFirstUniqueAttribute(smiClassPtr: *mut SmiClass) -> *mut SmiAttribute;
}
extern "C" {
    pub fn smiGetNextUniqueAttribute(smiTypePtr: *mut SmiAttribute) -> *mut SmiAttribute;
}
extern "C" {
    pub fn smiIsClassScalar(smiClassPtr: *mut SmiClass) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetAttributeFirstNamedNumber(
        smiAttributePtr: *mut SmiAttribute,
    ) -> *mut SmiNamedNumber;
}
extern "C" {
    pub fn smiGetAttributeNextNamedNumber(
        smiNamedNumberPtr: *mut SmiNamedNumber,
    ) -> *mut SmiNamedNumber;
}
extern "C" {
    pub fn smiGetAttributeFirstRange(smiAttributePtr: *mut SmiAttribute) -> *mut SmiRange;
}
extern "C" {
    pub fn smiGetAttributeNextRange(smiRangePtr: *mut SmiRange) -> *mut SmiRange;
}
extern "C" {
    pub fn smiGetAttributeLine(smiAttributePtr: *mut SmiAttribute) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetEvent(
        smiClassPtr: *mut SmiClass,
        attribute: *mut ::std::os::raw::c_char,
    ) -> *mut SmiEvent;
}
extern "C" {
    pub fn smiGetFirstEvent(smiClassPtr: *mut SmiClass) -> *mut SmiEvent;
}
extern "C" {
    pub fn smiGetNextEvent(smiEventPtr: *mut SmiEvent) -> *mut SmiEvent;
}
extern "C" {
    pub fn smiGetEventLine(smiEventPtr: *mut SmiEvent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetMacro(
        smiModulePtr: *mut SmiModule,
        macro_: *mut ::std::os::raw::c_char,
    ) -> *mut SmiMacro;
}
extern "C" {
    pub fn smiGetFirstMacro(smiModulePtr: *mut SmiModule) -> *mut SmiMacro;
}
extern "C" {
    pub fn smiGetNextMacro(smiMacroPtr: *mut SmiMacro) -> *mut SmiMacro;
}
extern "C" {
    pub fn smiGetMacroModule(smiMacroPtr: *mut SmiMacro) -> *mut SmiModule;
}
extern "C" {
    pub fn smiGetMacroLine(smiMacroPtr: *mut SmiMacro) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetNode(
        smiModulePtr: *mut SmiModule,
        name: *const ::std::os::raw::c_char,
    ) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetNodeByOID(oidlen: ::std::os::raw::c_uint, oid: *mut SmiSubid) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetFirstNode(smiModulePtr: *mut SmiModule, nodekind: SmiNodekind) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetNextNode(smiNodePtr: *mut SmiNode, nodekind: SmiNodekind) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetParentNode(smiNodePtr: *mut SmiNode) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetRelatedNode(smiNodePtr: *mut SmiNode) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetFirstChildNode(smiNodePtr: *mut SmiNode) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetNextChildNode(smiNodePtr: *mut SmiNode) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetNodeModule(smiNodePtr: *mut SmiNode) -> *mut SmiModule;
}
extern "C" {
    pub fn smiGetNodeType(smiNodePtr: *mut SmiNode) -> *mut SmiType;
}
extern "C" {
    pub fn smiGetNodeLine(smiNodePtr: *mut SmiNode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetFirstElement(smiNodePtr: *mut SmiNode) -> *mut SmiElement;
}
extern "C" {
    pub fn smiGetNextElement(smiElementPtr: *mut SmiElement) -> *mut SmiElement;
}
extern "C" {
    pub fn smiGetElementNode(smiElementPtr: *mut SmiElement) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetFirstOption(smiComplianceNodePtr: *mut SmiNode) -> *mut SmiOption;
}
extern "C" {
    pub fn smiGetNextOption(smiOptionPtr: *mut SmiOption) -> *mut SmiOption;
}
extern "C" {
    pub fn smiGetOptionNode(smiOptionPtr: *mut SmiOption) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetOptionLine(smiOptionPtr: *mut SmiOption) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetFirstRefinement(smiComplianceNodePtr: *mut SmiNode) -> *mut SmiRefinement;
}
extern "C" {
    pub fn smiGetNextRefinement(smiRefinementPtr: *mut SmiRefinement) -> *mut SmiRefinement;
}
extern "C" {
    pub fn smiGetRefinementNode(smiRefinementPtr: *mut SmiRefinement) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetRefinementType(smiRefinementPtr: *mut SmiRefinement) -> *mut SmiType;
}
extern "C" {
    pub fn smiGetRefinementWriteType(smiRefinementPtr: *mut SmiRefinement) -> *mut SmiType;
}
extern "C" {
    pub fn smiGetRefinementLine(smiRefinementPtr: *mut SmiRefinement) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetFirstUniquenessElement(smiNodePtr: *mut SmiNode) -> *mut SmiElement;
}
extern "C" {
    pub fn smiRenderOID(
        oidlen: ::std::os::raw::c_uint,
        oid: *mut SmiSubid,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn smiRenderValue(
        smiValuePtr: *mut SmiValue,
        smiTypePtr: *mut SmiType,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn smiRenderNode(
        smiNodePtr: *mut SmiNode,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn smiRenderType(
        smiTypePtr: *mut SmiType,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn smiGetMinSize(smiType: *mut SmiType) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn smiGetMaxSize(smiType: *mut SmiType) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn smiUnpack(
        row: *mut SmiNode,
        oid: *mut SmiSubid,
        oidlen: ::std::os::raw::c_uint,
        vals: *mut *mut SmiValue,
        valslen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiPack(
        row: *mut SmiNode,
        vals: *mut SmiValue,
        valslen: ::std::os::raw::c_int,
        oid: *mut *mut SmiSubid,
        oidlen: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiAsprintf(
        strp: *mut *mut ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiVasprintf(
        strp: *mut *mut ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiMalloc(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn smiRealloc(
        ptr: *mut ::std::os::raw::c_void,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn smiStrdup(s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn smiStrndup(s1: *const ::std::os::raw::c_char, n: size_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn smiFree(ptr: *mut ::std::os::raw::c_void);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
