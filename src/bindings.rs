/* automatically generated by rust-bindgen 0.59.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const TIME_UTC: u32 = 1;
pub const SMI_LIBRARY_VERSION: &'static [u8; 7usize] = b"2:27:0\0";
pub const SMI_VERSION_MAJOR: u32 = 0;
pub const SMI_VERSION_MINOR: u32 = 5;
pub const SMI_VERSION_PATCHLEVEL: u32 = 0;
pub const SMI_VERSION_STRING: &'static [u8; 6usize] = b"0.5.0\0";
pub const SMI_FLAG_NODESCR: u32 = 2048;
pub const SMI_FLAG_VIEWALL: u32 = 4096;
pub const SMI_FLAG_ERRORS: u32 = 8192;
pub const SMI_FLAG_RECURSIVE: u32 = 16384;
pub const SMI_FLAG_STATS: u32 = 32768;
pub const SMI_FLAG_MASK: u32 = 63488;
pub const SMI_BASETYPE_INTEGER32_MIN: i32 = -2147483648;
pub const SMI_BASETYPE_INTEGER32_MAX: u32 = 2147483647;
pub const SMI_BASETYPE_UNSIGNED32_MIN: u32 = 0;
pub const SMI_BASETYPE_UNSIGNED32_MAX: u32 = 4294967295;
pub const SMI_BASETYPE_UNSIGNED64_MIN: u32 = 0;
pub const SMI_NODEKIND_UNKNOWN: u32 = 0;
pub const SMI_NODEKIND_NODE: u32 = 1;
pub const SMI_NODEKIND_SCALAR: u32 = 2;
pub const SMI_NODEKIND_TABLE: u32 = 4;
pub const SMI_NODEKIND_ROW: u32 = 8;
pub const SMI_NODEKIND_COLUMN: u32 = 16;
pub const SMI_NODEKIND_NOTIFICATION: u32 = 32;
pub const SMI_NODEKIND_GROUP: u32 = 64;
pub const SMI_NODEKIND_COMPLIANCE: u32 = 128;
pub const SMI_NODEKIND_CAPABILITIES: u32 = 256;
pub const SMI_NODEKIND_ANY: u32 = 65535;
pub const SMI_RENDER_NUMERIC: u32 = 1;
pub const SMI_RENDER_NAME: u32 = 2;
pub const SMI_RENDER_QUALIFIED: u32 = 4;
pub const SMI_RENDER_FORMAT: u32 = 8;
pub const SMI_RENDER_PRINTABLE: u32 = 16;
pub const SMI_RENDER_UNKNOWN: u32 = 32;
pub const SMI_RENDER_TYPE_RECURSIVE: u32 = 64;
pub const SMI_RENDER_ALL: u32 = 255;
pub const SMI_UNKNOWN_LABEL: &'static [u8; 10usize] = b"<unknown>\0";
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
extern "C" {
    pub fn _calloc_base(_Count: size_t, _Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        _Count: ::std::os::raw::c_ulonglong,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _callnewh(_Size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _malloc_base(_Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(_Size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: size_t, _Alignment: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: size_t,
        _Dir: *mut wchar_t,
        _DirCount: size_t,
        _Filename: *mut wchar_t,
        _FilenameCount: size_t,
        _Ext: *mut wchar_t,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrMsg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__div_t() {
    assert_eq!(
        ::std::mem::size_of::<_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type lldiv_t = _lldiv_t;
extern "C" {
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[test]
fn bindgen_test_layout__LDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LDOUBLE>(),
        10usize,
        concat!("Size of: ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDOUBLE>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDOUBLE>())).ld as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDOUBLE),
            "::",
            stringify!(ld)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_DOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_DOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__CRT_FLOAT() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Size of: ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_FLOAT>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_FLOAT),
            "::",
            stringify!(f)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__LONGDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LONGDOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LONGDOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__LDBL12() {
    assert_eq!(
        ::std::mem::size_of::<_LDBL12>(),
        12usize,
        concat!("Size of: ", stringify!(_LDBL12))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDBL12>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDBL12))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDBL12>())).ld12 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDBL12),
            "::",
            stringify!(ld12)
        )
    );
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: size_t,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: size_t,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: size_t,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut size_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        36usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        4usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
}
extern "C" {
    pub fn _wasctime(_Tm: *const tm) -> *mut wchar_t;
}
extern "C" {
    pub fn _wasctime_s(_Buffer: *mut wchar_t, _SizeInWords: size_t, _Tm: *const tm) -> errno_t;
}
extern "C" {
    pub fn wcsftime(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Format: *const wchar_t,
        _Tm: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn _wcsftime_l(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Format: *const wchar_t,
        _Tm: *const tm,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wctime32(_Time: *const __time32_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wctime32_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Time: *const __time32_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctime64(_Time: *const __time64_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wctime64_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Time: *const __time64_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wstrdate_s(_Buffer: *mut wchar_t, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wstrdate(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wstrtime_s(_Buffer: *mut wchar_t, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wstrtime(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
pub type clock_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _timespec32 {
    pub tv_sec: __time32_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__timespec32() {
    assert_eq!(
        ::std::mem::size_of::<_timespec32>(),
        8usize,
        concat!("Size of: ", stringify!(_timespec32))
    );
    assert_eq!(
        ::std::mem::align_of::<_timespec32>(),
        4usize,
        concat!("Alignment of ", stringify!(_timespec32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_timespec32>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_timespec32),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_timespec32>())).tv_nsec as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_timespec32),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _timespec64 {
    pub tv_sec: __time64_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__timespec64() {
    assert_eq!(
        ::std::mem::size_of::<_timespec64>(),
        16usize,
        concat!("Size of: ", stringify!(_timespec64))
    );
    assert_eq!(
        ::std::mem::align_of::<_timespec64>(),
        8usize,
        concat!("Alignment of ", stringify!(_timespec64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_timespec64>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_timespec64),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_timespec64>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_timespec64),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
extern "C" {
    pub fn __daylight() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __dstbias() -> *mut ::std::os::raw::c_long;
}
extern "C" {
    pub fn __timezone() -> *mut ::std::os::raw::c_long;
}
extern "C" {
    pub fn __tzname() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _get_daylight(_Daylight: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_dstbias(_DaylightSavingsBias: *mut ::std::os::raw::c_long) -> errno_t;
}
extern "C" {
    pub fn _get_timezone(_TimeZone: *mut ::std::os::raw::c_long) -> errno_t;
}
extern "C" {
    pub fn _get_tzname(
        _ReturnValue: *mut size_t,
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Index: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn asctime(_Tm: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Tm: *const tm,
    ) -> errno_t;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn _ctime32(_Time: *const __time32_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ctime32_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Time: *const __time32_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _ctime64(_Time: *const __time64_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ctime64_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Time: *const __time64_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _difftime32(_Time1: __time32_t, _Time2: __time32_t) -> f64;
}
extern "C" {
    pub fn _difftime64(_Time1: __time64_t, _Time2: __time64_t) -> f64;
}
extern "C" {
    pub fn _gmtime32(_Time: *const __time32_t) -> *mut tm;
}
extern "C" {
    pub fn _gmtime32_s(_Tm: *mut tm, _Time: *const __time32_t) -> errno_t;
}
extern "C" {
    pub fn _gmtime64(_Time: *const __time64_t) -> *mut tm;
}
extern "C" {
    pub fn _gmtime64_s(_Tm: *mut tm, _Time: *const __time64_t) -> errno_t;
}
extern "C" {
    pub fn _localtime32(_Time: *const __time32_t) -> *mut tm;
}
extern "C" {
    pub fn _localtime32_s(_Tm: *mut tm, _Time: *const __time32_t) -> errno_t;
}
extern "C" {
    pub fn _localtime64(_Time: *const __time64_t) -> *mut tm;
}
extern "C" {
    pub fn _localtime64_s(_Tm: *mut tm, _Time: *const __time64_t) -> errno_t;
}
extern "C" {
    pub fn _mkgmtime32(_Tm: *mut tm) -> __time32_t;
}
extern "C" {
    pub fn _mkgmtime64(_Tm: *mut tm) -> __time64_t;
}
extern "C" {
    pub fn _mktime32(_Tm: *mut tm) -> __time32_t;
}
extern "C" {
    pub fn _mktime64(_Tm: *mut tm) -> __time64_t;
}
extern "C" {
    pub fn strftime(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Tm: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn _strftime_l(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxSize: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Tm: *const tm,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _strdate_s(_Buffer: *mut ::std::os::raw::c_char, _SizeInBytes: size_t) -> errno_t;
}
extern "C" {
    pub fn _strdate(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strtime_s(_Buffer: *mut ::std::os::raw::c_char, _SizeInBytes: size_t) -> errno_t;
}
extern "C" {
    pub fn _strtime(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _time32(_Time: *mut __time32_t) -> __time32_t;
}
extern "C" {
    pub fn _time64(_Time: *mut __time64_t) -> __time64_t;
}
extern "C" {
    pub fn _timespec32_get(
        _Ts: *mut _timespec32,
        _Base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _timespec64_get(
        _Ts: *mut _timespec64,
        _Base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tzset();
}
extern "C" {
    pub fn _getsystime(_Tm: *mut tm) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _setsystime(
        _Tm: *mut tm,
        _Milliseconds: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn tzset();
}
pub const YangDecl_YANG_DECL_UNKNOWN: YangDecl = 0;
pub const YangDecl_YANG_DECL_MODULE: YangDecl = 1;
pub const YangDecl_YANG_DECL_SUBMODULE: YangDecl = 2;
pub const YangDecl_YANG_DECL_REVISION: YangDecl = 3;
pub const YangDecl_YANG_DECL_IMPORT: YangDecl = 4;
pub const YangDecl_YANG_DECL_RANGE: YangDecl = 5;
pub const YangDecl_YANG_DECL_PATTERN: YangDecl = 6;
pub const YangDecl_YANG_DECL_CONTAINER: YangDecl = 7;
pub const YangDecl_YANG_DECL_MUST: YangDecl = 8;
pub const YangDecl_YANG_DECL_LEAF: YangDecl = 9;
pub const YangDecl_YANG_DECL_LEAF_LIST: YangDecl = 10;
pub const YangDecl_YANG_DECL_LIST: YangDecl = 11;
pub const YangDecl_YANG_DECL_CASE: YangDecl = 12;
pub const YangDecl_YANG_DECL_USES: YangDecl = 13;
pub const YangDecl_YANG_DECL_AUGMENT: YangDecl = 14;
pub const YangDecl_YANG_DECL_GROUPING: YangDecl = 15;
pub const YangDecl_YANG_DECL_CHOICE: YangDecl = 16;
pub const YangDecl_YANG_DECL_ARGUMENT: YangDecl = 17;
pub const YangDecl_YANG_DECL_RPC: YangDecl = 18;
pub const YangDecl_YANG_DECL_INPUT: YangDecl = 19;
pub const YangDecl_YANG_DECL_OUTPUT: YangDecl = 20;
pub const YangDecl_YANG_DECL_ANYXML: YangDecl = 21;
pub const YangDecl_YANG_DECL_INCLUDE: YangDecl = 22;
pub const YangDecl_YANG_DECL_ORGANIZATION: YangDecl = 23;
pub const YangDecl_YANG_DECL_CONTACT: YangDecl = 24;
pub const YangDecl_YANG_DECL_NAMESPACE: YangDecl = 25;
pub const YangDecl_YANG_DECL_YANG_VERSION: YangDecl = 26;
pub const YangDecl_YANG_DECL_PREFIX: YangDecl = 27;
pub const YangDecl_YANG_DECL_TYPEDEF: YangDecl = 28;
pub const YangDecl_YANG_DECL_PATH: YangDecl = 29;
pub const YangDecl_YANG_DECL_LENGTH: YangDecl = 30;
pub const YangDecl_YANG_DECL_TYPE: YangDecl = 31;
pub const YangDecl_YANG_DECL_ERROR_MESSAGE: YangDecl = 32;
pub const YangDecl_YANG_DECL_ERROR_APP_TAG: YangDecl = 33;
pub const YangDecl_YANG_DECL_MANDATORY: YangDecl = 34;
pub const YangDecl_YANG_DECL_NOTIFICATION: YangDecl = 35;
pub const YangDecl_YANG_DECL_EXTENSION: YangDecl = 36;
pub const YangDecl_YANG_DECL_BELONGS_TO: YangDecl = 37;
pub const YangDecl_YANG_DECL_YIN_ELEMENT: YangDecl = 38;
pub const YangDecl_YANG_DECL_UNKNOWN_STATEMENT: YangDecl = 39;
pub const YangDecl_YANG_DECL_DESCRIPTION: YangDecl = 40;
pub const YangDecl_YANG_DECL_REFERENCE: YangDecl = 41;
pub const YangDecl_YANG_DECL_STATUS: YangDecl = 42;
pub const YangDecl_YANG_DECL_CONFIG: YangDecl = 43;
pub const YangDecl_YANG_DECL_ENUM: YangDecl = 44;
pub const YangDecl_YANG_DECL_VALUE: YangDecl = 45;
pub const YangDecl_YANG_DECL_REQUIRE_INSTANCE: YangDecl = 46;
pub const YangDecl_YANG_DECL_BASE: YangDecl = 47;
pub const YangDecl_YANG_DECL_BIT: YangDecl = 48;
pub const YangDecl_YANG_DECL_POSITION: YangDecl = 49;
pub const YangDecl_YANG_DECL_UNITS: YangDecl = 50;
pub const YangDecl_YANG_DECL_DEFAULT: YangDecl = 51;
pub const YangDecl_YANG_DECL_FEATURE: YangDecl = 52;
pub const YangDecl_YANG_DECL_IF_FEATURE: YangDecl = 53;
pub const YangDecl_YANG_DECL_IDENTITY: YangDecl = 54;
pub const YangDecl_YANG_DECL_PRESENCE: YangDecl = 55;
pub const YangDecl_YANG_DECL_WHEN: YangDecl = 56;
pub const YangDecl_YANG_DECL_MIN_ELEMENTS: YangDecl = 57;
pub const YangDecl_YANG_DECL_MAX_ELEMENTS: YangDecl = 58;
pub const YangDecl_YANG_DECL_ORDERED_BY: YangDecl = 59;
pub const YangDecl_YANG_DECL_KEY: YangDecl = 60;
pub const YangDecl_YANG_DECL_UNIQUE: YangDecl = 61;
pub const YangDecl_YANG_DECL_REFINE: YangDecl = 62;
pub const YangDecl_YANG_DECL_DEVIATION: YangDecl = 63;
pub const YangDecl_YANG_DECL_DEVIATE: YangDecl = 64;
pub const YangDecl_YANG_DECL_FRACTION_DIGITS: YangDecl = 65;
pub const YangDecl_YANG_DECL_COMPLEX_TYPE: YangDecl = 66;
pub const YangDecl_YANG_DECL_ABSTRACT: YangDecl = 67;
pub const YangDecl_YANG_DECL_EXTENDS: YangDecl = 68;
pub const YangDecl_YANG_DECL_INSTANCE: YangDecl = 69;
pub const YangDecl_YANG_DECL_INSTANCE_LIST: YangDecl = 70;
pub const YangDecl_YANG_DECL_INSTANCE_TYPE: YangDecl = 71;
pub const YangDecl_YANG_DECL_SMI_OID: YangDecl = 73;
pub const YangDecl_YANG_DECL_SMI_DISPLAY_HINT: YangDecl = 74;
pub const YangDecl_YANG_DECL_SMI_DEFAULT: YangDecl = 75;
pub const YangDecl_YANG_DECL_SMI_MAX_ACCESS: YangDecl = 76;
pub const YangDecl_YANG_DECL_SMI_ALIAS: YangDecl = 77;
pub const YangDecl_YANG_DECL_SMI_IMPLIED: YangDecl = 78;
pub const YangDecl_YANG_DECL_LAST: YangDecl = 79;
pub type YangDecl = ::std::os::raw::c_int;
extern "C" {
    pub fn yangDeclAsString(decl: YangDecl) -> *mut ::std::os::raw::c_char;
}
pub type YangString = *mut ::std::os::raw::c_char;
pub const YangConfig_YANG_CONFIG_DEFAULT: YangConfig = 1;
pub const YangConfig_YANG_CONFIG_FALSE: YangConfig = 2;
pub const YangConfig_YANG_CONFIG_TRUE: YangConfig = 3;
pub type YangConfig = ::std::os::raw::c_int;
pub const YangStatus_YANG_STATUS_DEFAULT_CURRENT: YangStatus = 0;
pub const YangStatus_YANG_STATUS_CURRENT: YangStatus = 1;
pub const YangStatus_YANG_STATUS_DEPRECATED: YangStatus = 2;
pub const YangStatus_YANG_STATUS_OBSOLETE: YangStatus = 5;
pub type YangStatus = ::std::os::raw::c_int;
extern "C" {
    pub fn yangStatusAsString(status: YangStatus) -> *mut ::std::os::raw::c_char;
}
pub const YangBoolean_YANG_BOOLEAN_FALSE: YangBoolean = 2;
pub const YangBoolean_YANG_BOOLEAN_TRUE: YangBoolean = 3;
pub type YangBoolean = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct YangNode {
    pub value: YangString,
    pub extra: YangString,
    pub nodeKind: YangDecl,
    pub status: YangStatus,
    pub config: YangConfig,
    pub description: *mut ::std::os::raw::c_char,
    pub reference: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_YangNode() {
    assert_eq!(
        ::std::mem::size_of::<YangNode>(),
        48usize,
        concat!("Size of: ", stringify!(YangNode))
    );
    assert_eq!(
        ::std::mem::align_of::<YangNode>(),
        8usize,
        concat!("Alignment of ", stringify!(YangNode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YangNode>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YangNode),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YangNode>())).extra as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(YangNode),
            "::",
            stringify!(extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YangNode>())).nodeKind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(YangNode),
            "::",
            stringify!(nodeKind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YangNode>())).status as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(YangNode),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YangNode>())).config as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(YangNode),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YangNode>())).description as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(YangNode),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YangNode>())).reference as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(YangNode),
            "::",
            stringify!(reference)
        )
    );
}
extern "C" {
    pub fn yangIsModule(modulename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yangGetModule(modulename: *mut ::std::os::raw::c_char) -> *mut YangNode;
}
extern "C" {
    pub fn yangGetFirstChildNode(yangNodePtr: *mut YangNode) -> *mut YangNode;
}
extern "C" {
    pub fn yangGetNextChildNode(yangNodePtr: *mut YangNode) -> *mut YangNode;
}
extern "C" {
    pub fn yangGetFirstModule() -> *mut YangNode;
}
extern "C" {
    pub fn yangGetNextModule(yangModulePtr: *mut YangNode) -> *mut YangNode;
}
extern "C" {
    pub fn yangIsTrueConf(conf: YangConfig) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut smi_library_version: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut smi_version_string: *const ::std::os::raw::c_char;
}
pub type SmiIdentifier = *mut ::std::os::raw::c_char;
pub type SmiUnsigned32 = ::std::os::raw::c_ulong;
pub type SmiInteger32 = ::std::os::raw::c_long;
pub type SmiInteger64 = ::std::os::raw::c_longlong;
pub type SmiUnsigned64 = ::std::os::raw::c_ulonglong;
pub type SmiSubid = ::std::os::raw::c_uint;
pub type SmiFloat32 = f32;
pub type SmiFloat64 = f64;
pub type SmiFloat128 = f64;
pub const SmiLanguage_SMI_LANGUAGE_UNKNOWN: SmiLanguage = 0;
pub const SmiLanguage_SMI_LANGUAGE_SMIV1: SmiLanguage = 1;
pub const SmiLanguage_SMI_LANGUAGE_SMIV2: SmiLanguage = 2;
pub const SmiLanguage_SMI_LANGUAGE_SMING: SmiLanguage = 3;
pub const SmiLanguage_SMI_LANGUAGE_SPPI: SmiLanguage = 4;
pub const SmiLanguage_SMI_LANGUAGE_YANG: SmiLanguage = 5;
pub type SmiLanguage = ::std::os::raw::c_int;
extern "C" {
    pub fn smiLanguageAsString(language: SmiLanguage) -> *mut ::std::os::raw::c_char;
}
pub const SmiBasetype_SMI_BASETYPE_UNKNOWN: SmiBasetype = 0;
pub const SmiBasetype_SMI_BASETYPE_INTEGER32: SmiBasetype = 1;
pub const SmiBasetype_SMI_BASETYPE_OCTETSTRING: SmiBasetype = 2;
pub const SmiBasetype_SMI_BASETYPE_OBJECTIDENTIFIER: SmiBasetype = 3;
pub const SmiBasetype_SMI_BASETYPE_UNSIGNED32: SmiBasetype = 4;
pub const SmiBasetype_SMI_BASETYPE_INTEGER64: SmiBasetype = 5;
pub const SmiBasetype_SMI_BASETYPE_UNSIGNED64: SmiBasetype = 6;
pub const SmiBasetype_SMI_BASETYPE_FLOAT32: SmiBasetype = 7;
pub const SmiBasetype_SMI_BASETYPE_FLOAT64: SmiBasetype = 8;
pub const SmiBasetype_SMI_BASETYPE_FLOAT128: SmiBasetype = 9;
pub const SmiBasetype_SMI_BASETYPE_ENUM: SmiBasetype = 10;
pub const SmiBasetype_SMI_BASETYPE_BITS: SmiBasetype = 11;
pub const SmiBasetype_SMI_BASETYPE_POINTER: SmiBasetype = 12;
pub type SmiBasetype = ::std::os::raw::c_int;
extern "C" {
    pub fn smiBasetypeAsString(basetype: SmiBasetype) -> *mut ::std::os::raw::c_char;
}
pub const SmiStatus_SMI_STATUS_UNKNOWN: SmiStatus = 0;
pub const SmiStatus_SMI_STATUS_CURRENT: SmiStatus = 1;
pub const SmiStatus_SMI_STATUS_DEPRECATED: SmiStatus = 2;
pub const SmiStatus_SMI_STATUS_MANDATORY: SmiStatus = 3;
pub const SmiStatus_SMI_STATUS_OPTIONAL: SmiStatus = 4;
pub const SmiStatus_SMI_STATUS_OBSOLETE: SmiStatus = 5;
pub type SmiStatus = ::std::os::raw::c_int;
extern "C" {
    pub fn smiStatusAsString(status: SmiStatus) -> *mut ::std::os::raw::c_char;
}
pub const SmiAccess_SMI_ACCESS_UNKNOWN: SmiAccess = 0;
pub const SmiAccess_SMI_ACCESS_NOT_IMPLEMENTED: SmiAccess = 1;
pub const SmiAccess_SMI_ACCESS_NOT_ACCESSIBLE: SmiAccess = 2;
pub const SmiAccess_SMI_ACCESS_NOTIFY: SmiAccess = 3;
pub const SmiAccess_SMI_ACCESS_READ_ONLY: SmiAccess = 4;
pub const SmiAccess_SMI_ACCESS_READ_WRITE: SmiAccess = 5;
pub const SmiAccess_SMI_ACCESS_INSTALL: SmiAccess = 6;
pub const SmiAccess_SMI_ACCESS_INSTALL_NOTIFY: SmiAccess = 7;
pub const SmiAccess_SMI_ACCESS_REPORT_ONLY: SmiAccess = 8;
pub const SmiAccess_SMI_ACCESS_EVENT_ONLY: SmiAccess = 9;
pub type SmiAccess = ::std::os::raw::c_int;
extern "C" {
    pub fn smiAccessAsString(access: SmiAccess) -> *mut ::std::os::raw::c_char;
}
pub type SmiNodekind = ::std::os::raw::c_uint;
extern "C" {
    pub fn smiNodekindAsString(nodekind: SmiNodekind) -> *mut ::std::os::raw::c_char;
}
pub const SmiDecl_SMI_DECL_UNKNOWN: SmiDecl = 0;
pub const SmiDecl_SMI_DECL_IMPLICIT_TYPE: SmiDecl = 1;
pub const SmiDecl_SMI_DECL_TYPEASSIGNMENT: SmiDecl = 2;
pub const SmiDecl_SMI_DECL_IMPL_SEQUENCEOF: SmiDecl = 4;
pub const SmiDecl_SMI_DECL_VALUEASSIGNMENT: SmiDecl = 5;
pub const SmiDecl_SMI_DECL_OBJECTTYPE: SmiDecl = 6;
pub const SmiDecl_SMI_DECL_OBJECTIDENTITY: SmiDecl = 7;
pub const SmiDecl_SMI_DECL_MODULEIDENTITY: SmiDecl = 8;
pub const SmiDecl_SMI_DECL_NOTIFICATIONTYPE: SmiDecl = 9;
pub const SmiDecl_SMI_DECL_TRAPTYPE: SmiDecl = 10;
pub const SmiDecl_SMI_DECL_OBJECTGROUP: SmiDecl = 11;
pub const SmiDecl_SMI_DECL_NOTIFICATIONGROUP: SmiDecl = 12;
pub const SmiDecl_SMI_DECL_MODULECOMPLIANCE: SmiDecl = 13;
pub const SmiDecl_SMI_DECL_AGENTCAPABILITIES: SmiDecl = 14;
pub const SmiDecl_SMI_DECL_TEXTUALCONVENTION: SmiDecl = 15;
pub const SmiDecl_SMI_DECL_MACRO: SmiDecl = 16;
pub const SmiDecl_SMI_DECL_COMPL_GROUP: SmiDecl = 17;
pub const SmiDecl_SMI_DECL_COMPL_OBJECT: SmiDecl = 18;
pub const SmiDecl_SMI_DECL_IMPL_OBJECT: SmiDecl = 19;
pub const SmiDecl_SMI_DECL_MODULE: SmiDecl = 33;
pub const SmiDecl_SMI_DECL_EXTENSION: SmiDecl = 34;
pub const SmiDecl_SMI_DECL_TYPEDEF: SmiDecl = 35;
pub const SmiDecl_SMI_DECL_NODE: SmiDecl = 36;
pub const SmiDecl_SMI_DECL_SCALAR: SmiDecl = 37;
pub const SmiDecl_SMI_DECL_TABLE: SmiDecl = 38;
pub const SmiDecl_SMI_DECL_ROW: SmiDecl = 39;
pub const SmiDecl_SMI_DECL_COLUMN: SmiDecl = 40;
pub const SmiDecl_SMI_DECL_NOTIFICATION: SmiDecl = 41;
pub const SmiDecl_SMI_DECL_GROUP: SmiDecl = 42;
pub const SmiDecl_SMI_DECL_COMPLIANCE: SmiDecl = 43;
pub const SmiDecl_SMI_DECL_IDENTITY: SmiDecl = 44;
pub const SmiDecl_SMI_DECL_CLASS: SmiDecl = 45;
pub const SmiDecl_SMI_DECL_ATTRIBUTE: SmiDecl = 46;
pub const SmiDecl_SMI_DECL_EVENT: SmiDecl = 47;
pub type SmiDecl = ::std::os::raw::c_int;
extern "C" {
    pub fn smiDeclAsString(decl: SmiDecl) -> *mut ::std::os::raw::c_char;
}
pub const SmiIndexkind_SMI_INDEX_UNKNOWN: SmiIndexkind = 0;
pub const SmiIndexkind_SMI_INDEX_INDEX: SmiIndexkind = 1;
pub const SmiIndexkind_SMI_INDEX_AUGMENT: SmiIndexkind = 2;
pub const SmiIndexkind_SMI_INDEX_REORDER: SmiIndexkind = 3;
pub const SmiIndexkind_SMI_INDEX_SPARSE: SmiIndexkind = 4;
pub const SmiIndexkind_SMI_INDEX_EXPAND: SmiIndexkind = 5;
pub type SmiIndexkind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SmiValue {
    pub basetype: SmiBasetype,
    pub len: ::std::os::raw::c_uint,
    pub value: SmiValue__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SmiValue__bindgen_ty_1 {
    pub unsigned64: SmiUnsigned64,
    pub integer64: SmiInteger64,
    pub unsigned32: SmiUnsigned32,
    pub integer32: SmiInteger32,
    pub float32: SmiFloat32,
    pub float64: SmiFloat64,
    pub float128: SmiFloat128,
    pub oid: *mut SmiSubid,
    pub ptr: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_SmiValue__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<SmiValue__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(SmiValue__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiValue__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiValue__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SmiValue__bindgen_ty_1>())).unsigned64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue__bindgen_ty_1),
            "::",
            stringify!(unsigned64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SmiValue__bindgen_ty_1>())).integer64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue__bindgen_ty_1),
            "::",
            stringify!(integer64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SmiValue__bindgen_ty_1>())).unsigned32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue__bindgen_ty_1),
            "::",
            stringify!(unsigned32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SmiValue__bindgen_ty_1>())).integer32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue__bindgen_ty_1),
            "::",
            stringify!(integer32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiValue__bindgen_ty_1>())).float32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue__bindgen_ty_1),
            "::",
            stringify!(float32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiValue__bindgen_ty_1>())).float64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue__bindgen_ty_1),
            "::",
            stringify!(float64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiValue__bindgen_ty_1>())).float128 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue__bindgen_ty_1),
            "::",
            stringify!(float128)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiValue__bindgen_ty_1>())).oid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue__bindgen_ty_1),
            "::",
            stringify!(oid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiValue__bindgen_ty_1>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
}
#[test]
fn bindgen_test_layout_SmiValue() {
    assert_eq!(
        ::std::mem::size_of::<SmiValue>(),
        16usize,
        concat!("Size of: ", stringify!(SmiValue))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiValue>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiValue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiValue>())).basetype as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue),
            "::",
            stringify!(basetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiValue>())).len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiValue>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiValue),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SmiNamedNumber {
    pub name: SmiIdentifier,
    pub value: SmiValue,
}
#[test]
fn bindgen_test_layout_SmiNamedNumber() {
    assert_eq!(
        ::std::mem::size_of::<SmiNamedNumber>(),
        24usize,
        concat!("Size of: ", stringify!(SmiNamedNumber))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiNamedNumber>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiNamedNumber))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNamedNumber>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNamedNumber),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNamedNumber>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNamedNumber),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SmiRange {
    pub minValue: SmiValue,
    pub maxValue: SmiValue,
}
#[test]
fn bindgen_test_layout_SmiRange() {
    assert_eq!(
        ::std::mem::size_of::<SmiRange>(),
        32usize,
        concat!("Size of: ", stringify!(SmiRange))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiRange>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiRange>())).minValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiRange),
            "::",
            stringify!(minValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiRange>())).maxValue as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiRange),
            "::",
            stringify!(maxValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiModule {
    pub name: SmiIdentifier,
    pub path: *mut ::std::os::raw::c_char,
    pub organization: *mut ::std::os::raw::c_char,
    pub contactinfo: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub reference: *mut ::std::os::raw::c_char,
    pub language: SmiLanguage,
    pub conformance: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SmiModule() {
    assert_eq!(
        ::std::mem::size_of::<SmiModule>(),
        56usize,
        concat!("Size of: ", stringify!(SmiModule))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiModule>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiModule))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiModule>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiModule),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiModule>())).path as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiModule),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiModule>())).organization as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiModule),
            "::",
            stringify!(organization)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiModule>())).contactinfo as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiModule),
            "::",
            stringify!(contactinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiModule>())).description as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiModule),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiModule>())).reference as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiModule),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiModule>())).language as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiModule),
            "::",
            stringify!(language)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiModule>())).conformance as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiModule),
            "::",
            stringify!(conformance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiRevision {
    pub date: time_t,
    pub description: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SmiRevision() {
    assert_eq!(
        ::std::mem::size_of::<SmiRevision>(),
        16usize,
        concat!("Size of: ", stringify!(SmiRevision))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiRevision>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiRevision))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiRevision>())).date as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiRevision),
            "::",
            stringify!(date)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiRevision>())).description as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiRevision),
            "::",
            stringify!(description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiImport {
    pub module: SmiIdentifier,
    pub name: SmiIdentifier,
}
#[test]
fn bindgen_test_layout_SmiImport() {
    assert_eq!(
        ::std::mem::size_of::<SmiImport>(),
        16usize,
        concat!("Size of: ", stringify!(SmiImport))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiImport>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiImport))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiImport>())).module as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiImport),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiImport>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiImport),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiMacro {
    pub name: SmiIdentifier,
    pub decl: SmiDecl,
    pub status: SmiStatus,
    pub description: *mut ::std::os::raw::c_char,
    pub reference: *mut ::std::os::raw::c_char,
    pub abnf: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SmiMacro() {
    assert_eq!(
        ::std::mem::size_of::<SmiMacro>(),
        40usize,
        concat!("Size of: ", stringify!(SmiMacro))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiMacro>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiMacro))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiMacro>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiMacro),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiMacro>())).decl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiMacro),
            "::",
            stringify!(decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiMacro>())).status as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiMacro),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiMacro>())).description as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiMacro),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiMacro>())).reference as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiMacro),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiMacro>())).abnf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiMacro),
            "::",
            stringify!(abnf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiIdentity {
    pub name: SmiIdentifier,
    pub decl: SmiDecl,
    pub status: SmiStatus,
    pub description: *mut ::std::os::raw::c_char,
    pub reference: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SmiIdentity() {
    assert_eq!(
        ::std::mem::size_of::<SmiIdentity>(),
        32usize,
        concat!("Size of: ", stringify!(SmiIdentity))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiIdentity>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiIdentity))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiIdentity>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiIdentity),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiIdentity>())).decl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiIdentity),
            "::",
            stringify!(decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiIdentity>())).status as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiIdentity),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiIdentity>())).description as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiIdentity),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiIdentity>())).reference as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiIdentity),
            "::",
            stringify!(reference)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SmiType {
    pub name: SmiIdentifier,
    pub basetype: SmiBasetype,
    pub decl: SmiDecl,
    pub format: *mut ::std::os::raw::c_char,
    pub value: SmiValue,
    pub units: *mut ::std::os::raw::c_char,
    pub status: SmiStatus,
    pub description: *mut ::std::os::raw::c_char,
    pub reference: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SmiType() {
    assert_eq!(
        ::std::mem::size_of::<SmiType>(),
        72usize,
        concat!("Size of: ", stringify!(SmiType))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiType>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiType>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiType),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiType>())).basetype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiType),
            "::",
            stringify!(basetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiType>())).decl as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiType),
            "::",
            stringify!(decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiType>())).format as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiType),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiType>())).value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiType),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiType>())).units as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiType),
            "::",
            stringify!(units)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiType>())).status as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiType),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiType>())).description as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiType),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiType>())).reference as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiType),
            "::",
            stringify!(reference)
        )
    );
}
extern "C" {
    pub fn smiValueAsString(
        smiValue: *mut SmiValue,
        smiType: *mut SmiType,
        smiLanguage: SmiLanguage,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SmiNode {
    pub name: SmiIdentifier,
    pub oidlen: ::std::os::raw::c_uint,
    pub oid: *mut SmiSubid,
    pub decl: SmiDecl,
    pub access: SmiAccess,
    pub status: SmiStatus,
    pub format: *mut ::std::os::raw::c_char,
    pub value: SmiValue,
    pub units: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub reference: *mut ::std::os::raw::c_char,
    pub indexkind: SmiIndexkind,
    pub implied: ::std::os::raw::c_int,
    pub create: ::std::os::raw::c_int,
    pub nodekind: SmiNodekind,
}
#[test]
fn bindgen_test_layout_SmiNode() {
    assert_eq!(
        ::std::mem::size_of::<SmiNode>(),
        104usize,
        concat!("Size of: ", stringify!(SmiNode))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiNode>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiNode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).oidlen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(oidlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).oid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(oid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).decl as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).access as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).status as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).format as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).value as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).units as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(units)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).description as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).reference as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).indexkind as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(indexkind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).implied as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(implied)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).create as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiNode>())).nodekind as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiNode),
            "::",
            stringify!(nodekind)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiElement {
    pub dummy: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SmiElement() {
    assert_eq!(
        ::std::mem::size_of::<SmiElement>(),
        1usize,
        concat!("Size of: ", stringify!(SmiElement))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiElement>(),
        1usize,
        concat!("Alignment of ", stringify!(SmiElement))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiElement>())).dummy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiElement),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiOption {
    pub description: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SmiOption() {
    assert_eq!(
        ::std::mem::size_of::<SmiOption>(),
        8usize,
        concat!("Size of: ", stringify!(SmiOption))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiOption>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiOption))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiOption>())).description as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiOption),
            "::",
            stringify!(description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiRefinement {
    pub access: SmiAccess,
    pub description: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SmiRefinement() {
    assert_eq!(
        ::std::mem::size_of::<SmiRefinement>(),
        16usize,
        concat!("Size of: ", stringify!(SmiRefinement))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiRefinement>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiRefinement))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiRefinement>())).access as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiRefinement),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiRefinement>())).description as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiRefinement),
            "::",
            stringify!(description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiClass {
    pub name: SmiIdentifier,
    pub decl: SmiDecl,
    pub status: SmiStatus,
    pub description: *mut ::std::os::raw::c_char,
    pub reference: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SmiClass() {
    assert_eq!(
        ::std::mem::size_of::<SmiClass>(),
        32usize,
        concat!("Size of: ", stringify!(SmiClass))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiClass>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiClass))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiClass>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiClass),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiClass>())).decl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiClass),
            "::",
            stringify!(decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiClass>())).status as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiClass),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiClass>())).description as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiClass),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiClass>())).reference as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiClass),
            "::",
            stringify!(reference)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SmiAttribute {
    pub name: SmiIdentifier,
    pub basetype: SmiBasetype,
    pub decl: SmiDecl,
    pub format: *mut ::std::os::raw::c_char,
    pub value: SmiValue,
    pub units: *mut ::std::os::raw::c_char,
    pub status: SmiStatus,
    pub description: *mut ::std::os::raw::c_char,
    pub reference: *mut ::std::os::raw::c_char,
    pub access: SmiAccess,
}
#[test]
fn bindgen_test_layout_SmiAttribute() {
    assert_eq!(
        ::std::mem::size_of::<SmiAttribute>(),
        80usize,
        concat!("Size of: ", stringify!(SmiAttribute))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiAttribute>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiAttribute))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).basetype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(basetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).decl as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).format as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).units as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(units)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).status as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).description as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).reference as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiAttribute>())).access as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiAttribute),
            "::",
            stringify!(access)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmiEvent {
    pub name: SmiIdentifier,
    pub decl: SmiDecl,
    pub status: SmiStatus,
    pub description: *mut ::std::os::raw::c_char,
    pub reference: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SmiEvent() {
    assert_eq!(
        ::std::mem::size_of::<SmiEvent>(),
        32usize,
        concat!("Size of: ", stringify!(SmiEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SmiEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SmiEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiEvent>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiEvent),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiEvent>())).decl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiEvent),
            "::",
            stringify!(decl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiEvent>())).status as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiEvent),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiEvent>())).description as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiEvent),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmiEvent>())).reference as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SmiEvent),
            "::",
            stringify!(reference)
        )
    );
}
extern "C" {
    pub fn smiInit(tag: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiExit();
}
extern "C" {
    pub fn smiSetErrorLevel(level: ::std::os::raw::c_int);
}
extern "C" {
    pub fn smiGetFlags() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiSetFlags(userflags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn smiGetPath() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn smiSetPath(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiSetSeverity(pattern: *mut ::std::os::raw::c_char, severity: ::std::os::raw::c_int);
}
extern "C" {
    pub fn smiReadConfig(
        filename: *const ::std::os::raw::c_char,
        tag: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiLoadModule(module: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn smiIsLoaded(module: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type SmiErrorHandler = ::std::option::Option<
    unsafe extern "C" fn(
        path: *mut ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        severity: ::std::os::raw::c_int,
        msg: *mut ::std::os::raw::c_char,
        tag: *mut ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn smiSetErrorHandler(smiErrorHandler: SmiErrorHandler);
}
extern "C" {
    pub fn smiGetModule(module: *const ::std::os::raw::c_char) -> *mut SmiModule;
}
extern "C" {
    pub fn smiGetFirstModule() -> *mut SmiModule;
}
extern "C" {
    pub fn smiGetNextModule(smiModulePtr: *mut SmiModule) -> *mut SmiModule;
}
extern "C" {
    pub fn smiGetModuleIdentityNode(smiModulePtr: *mut SmiModule) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetFirstImport(smiModulePtr: *mut SmiModule) -> *mut SmiImport;
}
extern "C" {
    pub fn smiGetNextImport(smiImportPtr: *mut SmiImport) -> *mut SmiImport;
}
extern "C" {
    pub fn smiIsImported(
        smiModulePtr: *mut SmiModule,
        importedModulePtr: *mut SmiModule,
        importedName: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetFirstRevision(smiModulePtr: *mut SmiModule) -> *mut SmiRevision;
}
extern "C" {
    pub fn smiGetNextRevision(smiRevisionPtr: *mut SmiRevision) -> *mut SmiRevision;
}
extern "C" {
    pub fn smiGetRevisionLine(smiRevisionPtr: *mut SmiRevision) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetFirstIdentity(smiModulePtr: *mut SmiModule) -> *mut SmiIdentity;
}
extern "C" {
    pub fn smiGetNextIdentity(smiIdentityPtr: *mut SmiIdentity) -> *mut SmiIdentity;
}
extern "C" {
    pub fn smiGetParentIdentity(smiIdentityPtr: *mut SmiIdentity) -> *mut SmiIdentity;
}
extern "C" {
    pub fn smiGetIdentityLine(smiIdentityPtr: *mut SmiIdentity) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetIdentityModule(smiIdentityPtr: *mut SmiIdentity) -> *mut SmiModule;
}
extern "C" {
    pub fn smiGetIdentity(
        smiModulePtr: *mut SmiModule,
        identity: *mut ::std::os::raw::c_char,
    ) -> *mut SmiIdentity;
}
extern "C" {
    pub fn smiGetType(
        smiModulePtr: *mut SmiModule,
        type_: *mut ::std::os::raw::c_char,
    ) -> *mut SmiType;
}
extern "C" {
    pub fn smiGetFirstType(smiModulePtr: *mut SmiModule) -> *mut SmiType;
}
extern "C" {
    pub fn smiGetNextType(smiTypePtr: *mut SmiType) -> *mut SmiType;
}
extern "C" {
    pub fn smiGetParentType(smiTypePtr: *mut SmiType) -> *mut SmiType;
}
extern "C" {
    pub fn smiGetTypeModule(smiTypePtr: *mut SmiType) -> *mut SmiModule;
}
extern "C" {
    pub fn smiGetTypeLine(smiTypePtr: *mut SmiType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetFirstRange(smiTypePtr: *mut SmiType) -> *mut SmiRange;
}
extern "C" {
    pub fn smiGetNextRange(smiRangePtr: *mut SmiRange) -> *mut SmiRange;
}
extern "C" {
    pub fn smiGetMinMaxRange(
        smiType: *mut SmiType,
        min: *mut SmiValue,
        max: *mut SmiValue,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetFirstNamedNumber(smiTypePtr: *mut SmiType) -> *mut SmiNamedNumber;
}
extern "C" {
    pub fn smiGetNextNamedNumber(smiNamedNumberPtr: *mut SmiNamedNumber) -> *mut SmiNamedNumber;
}
extern "C" {
    pub fn smiGetFirstClass(smiModulePtr: *mut SmiModule) -> *mut SmiClass;
}
extern "C" {
    pub fn smiGetNextClass(smiClassPtr: *mut SmiClass) -> *mut SmiClass;
}
extern "C" {
    pub fn smiGetParentClass(smiClassPtr: *mut SmiClass) -> *mut SmiClass;
}
extern "C" {
    pub fn smiGetClassModule(smiClassPtr: *mut SmiClass) -> *mut SmiModule;
}
extern "C" {
    pub fn smiGetClass(
        smiModulePtr: *mut SmiModule,
        className: *mut ::std::os::raw::c_char,
    ) -> *mut SmiClass;
}
extern "C" {
    pub fn smiGetClassLine(smiClassPtr: *mut SmiClass) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetAttribute(
        smiClassPtr: *mut SmiClass,
        attribute: *mut ::std::os::raw::c_char,
    ) -> *mut SmiAttribute;
}
extern "C" {
    pub fn smiGetFirstAttribute(smiClassPtr: *mut SmiClass) -> *mut SmiAttribute;
}
extern "C" {
    pub fn smiGetNextAttribute(smiAtrributePtr: *mut SmiAttribute) -> *mut SmiAttribute;
}
extern "C" {
    pub fn smiGetAttributeParentType(smiAtrributePtr: *mut SmiAttribute) -> *mut SmiType;
}
extern "C" {
    pub fn smiGetAttributeParentClass(smiAtrributePtr: *mut SmiAttribute) -> *mut SmiClass;
}
extern "C" {
    pub fn smiGetFirstUniqueAttribute(smiClassPtr: *mut SmiClass) -> *mut SmiAttribute;
}
extern "C" {
    pub fn smiGetNextUniqueAttribute(smiTypePtr: *mut SmiAttribute) -> *mut SmiAttribute;
}
extern "C" {
    pub fn smiIsClassScalar(smiClassPtr: *mut SmiClass) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetAttributeFirstNamedNumber(
        smiAttributePtr: *mut SmiAttribute,
    ) -> *mut SmiNamedNumber;
}
extern "C" {
    pub fn smiGetAttributeNextNamedNumber(
        smiNamedNumberPtr: *mut SmiNamedNumber,
    ) -> *mut SmiNamedNumber;
}
extern "C" {
    pub fn smiGetAttributeFirstRange(smiAttributePtr: *mut SmiAttribute) -> *mut SmiRange;
}
extern "C" {
    pub fn smiGetAttributeNextRange(smiRangePtr: *mut SmiRange) -> *mut SmiRange;
}
extern "C" {
    pub fn smiGetAttributeLine(smiAttributePtr: *mut SmiAttribute) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetEvent(
        smiClassPtr: *mut SmiClass,
        attribute: *mut ::std::os::raw::c_char,
    ) -> *mut SmiEvent;
}
extern "C" {
    pub fn smiGetFirstEvent(smiClassPtr: *mut SmiClass) -> *mut SmiEvent;
}
extern "C" {
    pub fn smiGetNextEvent(smiEventPtr: *mut SmiEvent) -> *mut SmiEvent;
}
extern "C" {
    pub fn smiGetEventLine(smiEventPtr: *mut SmiEvent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetMacro(
        smiModulePtr: *mut SmiModule,
        macro_: *mut ::std::os::raw::c_char,
    ) -> *mut SmiMacro;
}
extern "C" {
    pub fn smiGetFirstMacro(smiModulePtr: *mut SmiModule) -> *mut SmiMacro;
}
extern "C" {
    pub fn smiGetNextMacro(smiMacroPtr: *mut SmiMacro) -> *mut SmiMacro;
}
extern "C" {
    pub fn smiGetMacroModule(smiMacroPtr: *mut SmiMacro) -> *mut SmiModule;
}
extern "C" {
    pub fn smiGetMacroLine(smiMacroPtr: *mut SmiMacro) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetNode(
        smiModulePtr: *mut SmiModule,
        name: *const ::std::os::raw::c_char,
    ) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetNodeByOID(oidlen: ::std::os::raw::c_uint, oid: *mut SmiSubid) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetFirstNode(smiModulePtr: *mut SmiModule, nodekind: SmiNodekind) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetNextNode(smiNodePtr: *mut SmiNode, nodekind: SmiNodekind) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetParentNode(smiNodePtr: *mut SmiNode) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetRelatedNode(smiNodePtr: *mut SmiNode) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetFirstChildNode(smiNodePtr: *mut SmiNode) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetNextChildNode(smiNodePtr: *mut SmiNode) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetNodeModule(smiNodePtr: *mut SmiNode) -> *mut SmiModule;
}
extern "C" {
    pub fn smiGetNodeType(smiNodePtr: *mut SmiNode) -> *mut SmiType;
}
extern "C" {
    pub fn smiGetNodeLine(smiNodePtr: *mut SmiNode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetFirstAlias(smiNode: *mut SmiNode) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetNextAlias(smiNode: *mut SmiNode) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetFirstElement(smiNodePtr: *mut SmiNode) -> *mut SmiElement;
}
extern "C" {
    pub fn smiGetNextElement(smiElementPtr: *mut SmiElement) -> *mut SmiElement;
}
extern "C" {
    pub fn smiGetElementNode(smiElementPtr: *mut SmiElement) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetFirstOption(smiComplianceNodePtr: *mut SmiNode) -> *mut SmiOption;
}
extern "C" {
    pub fn smiGetNextOption(smiOptionPtr: *mut SmiOption) -> *mut SmiOption;
}
extern "C" {
    pub fn smiGetOptionNode(smiOptionPtr: *mut SmiOption) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetOptionLine(smiOptionPtr: *mut SmiOption) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetFirstRefinement(smiComplianceNodePtr: *mut SmiNode) -> *mut SmiRefinement;
}
extern "C" {
    pub fn smiGetNextRefinement(smiRefinementPtr: *mut SmiRefinement) -> *mut SmiRefinement;
}
extern "C" {
    pub fn smiGetRefinementNode(smiRefinementPtr: *mut SmiRefinement) -> *mut SmiNode;
}
extern "C" {
    pub fn smiGetRefinementType(smiRefinementPtr: *mut SmiRefinement) -> *mut SmiType;
}
extern "C" {
    pub fn smiGetRefinementWriteType(smiRefinementPtr: *mut SmiRefinement) -> *mut SmiType;
}
extern "C" {
    pub fn smiGetRefinementLine(smiRefinementPtr: *mut SmiRefinement) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiGetFirstUniquenessElement(smiNodePtr: *mut SmiNode) -> *mut SmiElement;
}
extern "C" {
    pub fn smiRenderOID(
        oidlen: ::std::os::raw::c_uint,
        oid: *mut SmiSubid,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn smiRenderValue(
        smiValuePtr: *mut SmiValue,
        smiTypePtr: *mut SmiType,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn smiRenderNode(
        smiNodePtr: *mut SmiNode,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn smiRenderType(
        smiTypePtr: *mut SmiType,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn smiGetMinSize(smiType: *mut SmiType) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn smiGetMaxSize(smiType: *mut SmiType) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn smiUnpack(
        row: *mut SmiNode,
        oid: *mut SmiSubid,
        oidlen: ::std::os::raw::c_uint,
        vals: *mut *mut SmiValue,
        valslen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiPack(
        row: *mut SmiNode,
        vals: *mut SmiValue,
        valslen: ::std::os::raw::c_int,
        oid: *mut *mut SmiSubid,
        oidlen: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiAsprintf(
        strp: *mut *mut ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiVasprintf(
        strp: *mut *mut ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ap: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn smiMalloc(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn smiRealloc(
        ptr: *mut ::std::os::raw::c_void,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn smiStrdup(s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn smiStrndup(s1: *const ::std::os::raw::c_char, n: size_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn smiFree(ptr: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
